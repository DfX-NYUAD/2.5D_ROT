#ifndef __DO_RMAHDR_
#define __DO_RMAHDR_

#ifdef __cplusplus
  extern "C" {
#endif

#define VCS_RTLIB_TLS_MODEL  __attribute__((tls_model("initial-exec")))

typedef unsigned long UP;
typedef unsigned U;
typedef unsigned char UB;
typedef unsigned char scalar;
typedef struct vec32 vec32;
typedef unsigned short US;
typedef unsigned char SVAL;
typedef unsigned char TYPEB;
typedef struct qird QIRD;
typedef unsigned char UST_e;
typedef unsigned uscope_t;
typedef U  NumLibs_t;
struct vec32 {
    U  I1;
    U  I2;
};
typedef unsigned long RP;
typedef unsigned long RO;
typedef unsigned long long ULL;
typedef U  GateCount;
typedef U  NodeCount;
typedef unsigned short HsimEdge;
typedef unsigned char HsimExprChar;
typedef struct {
    U  I690;
    RP  I691;
} RmaReceiveClock1;
typedef NodeCount  FlatNodeNum;
typedef U  InstNum;
typedef unsigned long long TimeStamp64;
typedef unsigned long long TimeStamp;
typedef enum {
    PD_SING = 0,
    PD_RF = 1,
    PD_PLSE = 2,
    PD_PLSE_RF = 3,
    PD_NULL = 4
} PD_e;
typedef TimeStamp  RmaTimeStamp;
typedef TimeStamp64  RmaTimeStamp64;
typedef union {
    double I712;
    unsigned long long I713;
    unsigned  I714[2];
} rma_clock_struct;
typedef struct eblk EBLK;
typedef int (* E_fn)(void);
typedef struct eblk {
    struct eblk * I721;
    E_fn  I722;
    struct iptmpl * I723;
    unsigned I725;
    unsigned I726;
    struct eblk * I727;
} eblk_struct;
typedef struct {
    RP  I721;
    RP  I722;
    RP  I723;
    unsigned I725;
    unsigned I726;
    RP  I727;
} RmaEblk;
typedef struct {
    RP  I721;
    RP  I722;
    RP  I723;
    unsigned I725;
    unsigned I726;
    RP  I727;
    unsigned val;
} RmaEblklq;
typedef union {
    double I712;
    unsigned long long I713;
    unsigned  I714[2];
} clock_struct;
typedef clock_struct  RmaClockStruct;
typedef struct RmaRetain_t RmaRetain;
struct RmaRetain_t {
    RP  I762;
    RmaEblk  I720;
    U  I764;
    US  I765 :1;
    US  I766 :4;
    US  I187 :2;
    US  state :2;
    US  I768 :1;
    US  I769 :2;
    US  I770 :2;
    US  fHsim :1;
    US  I563 :1;
    scalar  newval;
    scalar  I773;
    RP  I774;
};
struct retain_t {
    struct retain_t * I762;
    EBLK  I720;
    U  I764;
    US  I765 :1;
    US  I766 :4;
    US  I187 :2;
    US  state :2;
    US  I768 :1;
    US  I769 :2;
    US  I770 :2;
    US  fHsim :1;
    US  I771 :1;
    scalar  newval;
    scalar  I773;
    void * I774;
};
typedef struct MPSched MPS;
typedef struct RmaMPSched RmaMps;
struct MPSched {
    MPS  * I753;
    scalar  I754;
    scalar  I755;
    scalar  I756;
    scalar  fHsim :1;
    scalar  I187 :6;
    U  I758;
    EBLK  I759;
    void * I760;
    UP   I761[1];
};
struct RmaMPSched {
    RP  I753;
    scalar  I754;
    scalar  I755;
    scalar  I756;
    scalar  fHsim :1;
    scalar  I187 :6;
    U  I758;
    RmaEblk  I759;
    RP  I760;
    RP   I761[1];
};
typedef struct RmaMPSchedPulse RmaMpsp;
struct RmaMPSchedPulse {
    RP  I753;
    scalar  I754;
    scalar  I755;
    scalar  I756;
    scalar  I187;
    U  I758;
    RmaEblk  I759;
    scalar  I770;
    scalar  I779;
    scalar  I780;
    scalar  I781;
    U  I782;
    RmaClockStruct  I783;
    RmaClockStruct  I784;
    U  state;
    U  I785;
    RP  I723;
    RP  I786;
    RP  I787;
    RP   I761[1];
};
typedef struct MPItem MPI;
struct MPItem {
    U  * I789;
    void * I790;
};
typedef struct {
    RmaEblk  I720;
    RP  I791;
    scalar  I792;
    scalar  I770;
    scalar  I793;
} RmaTransEventHdr;
typedef struct RmaMPSchedPulseNewCsdf RmaMpspNewCsdf;
struct RmaMPSchedPulseNewCsdf {
    RP  I753;
    scalar  I754;
    scalar  I755;
    scalar  I756;
    scalar  fHsim :1;
    scalar  I187 :6;
    U  I758;
    RmaEblk  I759;
    scalar  I770;
    scalar  I779;
    scalar  I780;
    scalar  I781;
    U  state :4;
    U  I795 :28;
    RmaClockStruct  I783;
    RmaClockStruct  I784;
    RP  I796;
    RP  I723;
    RP  I797;
    RP   I761[1];
};
typedef struct red_t {
    U  I798;
    U  I799;
    U  I669;
} RED;
typedef struct predd {
    PD_e  I187;
    RED   I800[0];
} PREDD;
union rhs_value {
    vec32  I801;
    scalar  I792;
    vec32  * I770;
    double I802;
    U  I803;
};
typedef struct nbs_t {
    struct nbs_t * I804;
    struct nbs_t * I806;
    void (* I807)(struct nbs_t * I774);
    U  I808 :1;
    U  I809 :1;
    U  I810 :1;
    U  I811 :1;
    U  I812 :1;
    U  I813 :1;
    U  I814 :26;
    U  I815;
    void * I816;
    union rhs_value I817;
    vec32  I712;
    union {
        struct nbs_t * first;
        struct nbs_t * last;
    } I819;
} NBS;
typedef struct {
    int * I820;
    long long I821;
} TypeData;
struct etype {
    U  I579 :8;
    U  I580 :24;
    U  I581;
    U  I582 :1;
    U  I583 :1;
    U  I584 :1;
    U  I585 :1;
    U  I586 :1;
    U  I587 :1;
    U  I588 :1;
    U  I589 :1;
    U  I590 :1;
    U  I591 :4;
    U  I592 :1;
    U  I593 :1;
    U  I594 :1;
    U  I595 :1;
    U  I596 :1;
    U  I597 :1;
    U  I598 :1;
    U  I599 :1;
    U  I600 :2;
    U  I601 :1;
    U  I602 :2;
    U  I603 :1;
    U  I604 :1;
    U  I605 :1;
    U  I606 :1;
    U  I366 :2;
    U  I607;
    TypeData  * I608;
    U  I609;
    U  I610;
    U  I611 :1;
    U  I612 :1;
    U  I613 :1;
    U  I614 :1;
    U  I615 :2;
    U  I616 :2;
    U  I617 :1;
    U  I618 :1;
    U  I619 :1;
    U  I620 :1;
    U  I621 :1;
    U  I622 :1;
    U  I623 :1;
    U  I624 :1;
    U  I625 :1;
    U  I626 :15;
};
typedef struct {
    RP  I822;
    RP  I786;
    RP  I723;
    RP  I787;
    RmaEblk  I720;
    RmaEblk  I823;
    RP  I824;
    scalar  I792;
    scalar  I770;
    char state;
    uscope_t  I825;
    U  I826;
    RP  I827;
    scalar  I779;
    scalar  I780;
    scalar  I781;
    RmaClockStruct  I783;
    RmaClockStruct  I784;
    RP  I760;
} RmaPulse;
typedef enum {
    QIRDModuleC = 1,
    QIRDSVPackageC = 2,
    QIRDSpiceModuleC = 3
} QIRDModuleType;
typedef struct {
    U  I831 :1;
    U  I832 :1;
    U  I833 :1;
    U  I834 :1;
    U  I835 :1;
    U  I836 :1;
    U  I837 :1;
    U  I838 :1;
    U  I839 :1;
    U  I840 :1;
    U  I841 :1;
    U  I842 :1;
    U  I843 :1;
    U  I844 :1;
    U  I845 :1;
    U  I846 :1;
    U  I847 :1;
    U  I848 :1;
    QIRDModuleType  I849 :2;
    U  I850 :1;
    U  I851 :1;
    U  I852 :1;
    U  I853 :1;
    U  I854 :1;
    U  I855 :1;
    U  I856 :1;
    U  I857 :1;
    U  I858 :1;
    U  I859 :1;
    U  I860 :1;
    U  I861 :1;
    U  I862 :1;
    U  I863 :1;
    U  I864 :1;
    U  I865 :1;
    U  I866 :1;
} BitFlags;
struct qird {
    US  I4;
    US  I5;
    U  I6;
    U  I7;
    char * I8;
    char * I9;
    U  * I10;
    char * I11;
    char * I12;
    U  I13;
    U  I14;
    struct vcd_rt * I15;
    U  I17;
    struct _vcdOffset_rt * I18;
    UP  * I20;
    U  I21;
    UP  * I22;
    U  I23;
    U  I24;
    U  I25;
    U  * I26;
    U  * I27;
    void * I28;
    void * I29;
    U  I30;
    int I31;
    UP  I32;
    U  I33;
    U  I34;
    U  I35;
    UP  I36;
    U  * I37;
    UP  I38;
    U  I39;
    BitFlags  I40;
    U  I41;
    U  I42;
    U  I43;
    U  I44;
    U  I45;
    U  * I46;
    U  I47;
    U  * I48;
    U  I49;
    U  I50;
    U  I51;
    U  I52;
    U  I53;
    U  I54;
    U  I55;
    U  * I56;
    U  * I57;
    U  I58;
    U  I59;
    U  * I60;
    U  I61;
    U  * I62;
    U  I63;
    U  I64;
    U  I65;
    U  I66;
    U  * I67;
    U  I68;
    U  * I69;
    U  I70;
    U  I71;
    U  I72;
    U  I73;
    U  I74;
    U  I75;
    U  * I76;
    char * I77;
    U  I78;
    U  I79;
    U  I80;
    U  I81;
    U  I82;
    U  * I83;
    U  I84;
    U  I85;
    UP  * I86;
    U  I87;
    U  I88;
    UP  * I89;
    U  I90;
    U  I91;
    U  I92;
    U  I93;
    U  I94;
    U  I95;
    U  * I96;
    U  I97;
    U  I98;
    U  * I99;
    U  * I100;
    U  * I101;
    U  * I102;
    U  * I103;
    U  I104;
    U  I105;
    struct taskInfo * I106;
    U  I108;
    U  I109;
    U  I110;
    int * I111;
    U  * I112;
    UP  * I113;
    U  * I114;
    U  I115;
    U  I116;
    U  I117;
    U  I118;
    U  I119;
    struct qrefer * I120;
    U  * I122;
    unsigned * I123;
    void * I124;
    U  I125;
    U  I126;
    struct classStaticReferData * I127;
    U  I129;
    U  * I130;
    U  I131;
    U  * I132;
    U  I133;
    struct wakeupInfoStruct * I134;
    U  I136;
    U  I137;
    U  I138;
    U  * I139;
    U  I140;
    U  * I141;
    U  I142;
    U  I143;
    U  I144;
    U  * I145;
    U  I146;
    U  * I147;
    U  I148;
    U  I149;
    U  * I150;
    U  I151;
    U  I152;
    U  * I153;
    U  * I154;
    U  * I155;
    U  I156;
    U  I157;
    U  I158;
    U  I159;
    U  I160;
    struct qrefee * I161;
    U  * I163;
    U  I164;
    struct qdefrefee * I165;
    U  * I167;
    int (* I168)(void);
    char * I169;
    U  I170;
    U  I171;
    void * I172;
    void * I173;
    NumLibs_t  I174;
    char * I175;
    U  * I176;
    U  I177;
    U  I178;
    U  I179;
    U  I180;
    U  I181;
    U  * I182;
    U  * I183;
    int I184;
    struct clock_load * I185;
    int I200;
    struct clock_data * I201;
    int I217;
    struct clock_hiconn * I218;
    U  I222;
    int I223;
    U  I224;
    int I225;
    U  * I226;
    U  * I227;
    U  I228;
    void * I229;
    U  I230;
    U  I231;
    UP  * I232;
    void * I233;
    U  I234;
    UP  * I235;
    U  * I236;
    int (* I237)(void);
    U  * I238;
    UP  * I239;
    U  * I240;
    U  I241 :1;
    U  I242 :31;
    U  I243;
    U  I244;
    UP  * I245;
    U  * I246;
    U  I247 :1;
    U  I248 :1;
    U  I249 :1;
    U  I250 :1;
    U  I251 :28;
    U  I252;
    U  I253;
    U  I254;
    U  I255 :31;
    U  I256 :1;
    UP  * I257;
    UP  * I258;
    U  * I259;
    U  * I260;
    U  * I261;
    UP  * I262;
    UP  * I263;
    UP  * I264;
    U  * I265;
    UP  * I266;
    UP  * I267;
    UP  * I268;
    char * I269;
    U  I270;
    U  I271;
    U  I272;
    UP  * I273;
    UP  * I274;
    UP  * I275;
    UP  * I276;
    UP  * I277;
    UP  * I278;
    UP  * I279;
    UP  * I280;
    UP  * I281;
    UP  * I282;
    UP  * I283;
    UP  * I284;
    UP  * I285;
    U  * I286;
    U  * I287;
    UP  * I288;
    U  I289;
    U  I290;
    U  I291;
    U  I292;
    U  I293;
    U  I294;
    U  I295;
    U  I296;
    char * I297;
    U  * I298;
    U  I299;
    U  I300;
    U  I301;
    U  I302;
    U  I303;
    UP  * I304;
    UP  * I305;
    UP  * I306;
    UP  * I307;
    struct daidirInfo * I308;
    struct vcs_tftable * I310;
    U  I312;
    UP  * I313;
    UP  * I314;
    U  I315;
    U  I316;
    U  I317;
    UP  * I318;
    U  * I319;
    struct qird_hil_data * I320;
    UP  (* I322)(void);
    UP  (* I323)(void);
    UP  (* I324)(void);
    UP  (* I325)(void);
    UP  (* I326)(void);
    int * I327;
    int (* I328)(void);
    char * I329;
    UP  * I330;
    UP  * I331;
    UP  (* I332)(void);
    int (* I333)(void);
    int * I334;
    int (* I335)(void);
    int * I336;
    char * I337;
    U  * I338;
    U  * I339;
    U  * I340;
    U  * I341;
    void * I342;
    U  I343;
    void * I344;
    U  I345;
    U  I346;
    U  I347;
    U  I348;
    U  I349;
    U  I350;
    UP  * I351;
    U  * I352;
    U  * I353;
    U  I354 :15;
    U  I355 :14;
    U  I356 :1;
    U  I357 :1;
    U  I358 :1;
    U  I359 :3;
    U  I360 :1;
    U  I361 :1;
    U  I362 :17;
    U  I363 :3;
    U  I364 :5;
    U  I365 :1;
    U  I366 :1;
    U  I367 :1;
    U  I368 :31;
    struct scope * I369;
    U  I371;
    U  I372;
    U  I373;
    U  * I374;
    U  * I375;
    U  * I376;
    U  I377;
    U  I378;
    U  I379;
    struct pcbt * I380;
    U  I390;
    U  I391;
    U  I392;
    U  I393;
    void * I394;
    void * I395;
    void * I396;
    int I397;
    U  * I398;
    U  I399;
    U  I400;
    U  I401;
    U  I402;
    U  I403;
    U  I404;
    U  I405;
    void * I406;
    UP  * I407;
    U  I408;
    U  I409;
    void * I410;
    U  I411;
    void * I412;
    U  I413;
    void * I414;
    U  I415;
    int (* I416)(void);
    int (* I417)(void);
    void * I418;
    void * I419;
    void * I420;
    U  I421;
    U  I422;
    U  I423;
    U  I424;
    U  I425;
    U  I426;
    char * I427;
    U  I428;
    U  * I429;
    U  I430;
    U  * I431;
    U  I432;
    U  I433;
    U  I434;
    U  I435;
    U  I436;
    U  I437;
    U  * I438;
    U  I439;
    U  I440;
    U  * I441;
    U  I442;
    U  I443;
    U  * I444;
    char * I445;
    U  I446;
    U  I447;
    U  I448;
    U  I449;
    U  * I450;
    U  * I451;
    U  I452;
    U  * I453;
    U  * I454;
    U  I455;
    U  I456;
    U  I457;
    UP  * I458;
    U  I459;
    U  I460;
    U  I461;
    struct cosim_info * I462;
    U  I464;
    U  * I465;
    U  I466;
    void * I467;
    U  I468;
    U  * I469;
    U  I470;
    U  * I471;
    U  I472;
    U  I473;
    U  * I474;
    U  I475;
    U  * I476;
    U  I477;
    U  * I478;
    U  I479;
    U  I480;
    U  I481;
    U  I482;
    U  I483;
    U  I484;
    U  I485;
    U  I486;
    U  I487;
    U  * I488;
    U  * I489;
    void (* I490)(void);
    U  * I491;
    UP  * I492;
    struct mhdl_outInfo * I493;
    UP  * I495;
    U  I496;
    UP  * I497;
    U  I498;
    void * I499;
    U  * I500;
    void * I501;
    char * I502;
    int (* I503)(void);
    U  * I504;
    char * I505;
    char * I506;
    U  I507;
    U  * I508;
    char * I509;
    U  I510;
    struct regInitInfo * I511;
    UP  * I513;
    U  * I514;
    char * I515;
    U  I516;
    U  I517;
    U  I518;
    U  I519;
    U  I520;
    U  I521;
    U  I522;
    U  I523;
    UP  * I524;
    U  I525;
    U  I526;
    U  I527;
    U  I528;
    UP  * I529;
    U  I530;
    UP  * I531;
    U  I532;
    U  I533;
    U  I534;
    U  * I535;
    U  I536;
    U  I537;
    U  I538;
    U  * I539;
    U  * I540;
    UP  * I541;
    UP  * I542;
    void * I543;
    UP  I544;
    void * I545;
    void * I546;
    void * I547;
    void * I548;
    void * I549;
    UP  I550;
    U  * I551;
    U  * I552;
    void * I553;
    U  I554 :1;
    U  I555 :31;
    U  I556;
    U  I557;
    U  I558;
    int I559;
    U  I560 :1;
    U  I561 :1;
    U  I562 :1;
    U  I563 :29;
    void * I564;
    void * I565;
    void * I566;
    void * I567;
    UP  * I568;
    U  * I569;
    U  I570;
    char * I571;
    U  * I572;
    U  * I573;
    char * I574;
    int * I575;
    UP  * I576;
    struct etype * I577;
    U  I627;
    U  I628;
    U  I629;
    U  * I630;
    void * I631;
    U  I632;
    U  I633;
    void * I634;
    U  I635;
    U  I636;
    U  * I637;
    U  * I638;
    char * I639;
    U  I640;
    U  I641;
    U  * I642;
    U  I643;
    U  * I644;
    U  I645;
    U  I646;
    U  * I647;
};
typedef struct pcbt {
    U  * I382;
    UP  I383;
    U  I384;
    U  I385;
    U  I386;
    U  I387;
    U  I388;
    U  I389;
} PCBT;
struct iptmpl {
    QIRD  * I728;
    struct vcs_globals_t * I729;
    void * I731;
    UP  I732;
    UP  I733;
    struct iptmpl * I723[2];
};
typedef unsigned long long FileOffset;
typedef struct _hsimPeriodL {
    char  I918[256];
    struct _hsimPeriodL * I872;
} HsimPeriodL;
typedef struct {
    U   I920[2];
    U  I921 :1;
    U  I922 :1;
    U  I923 :8;
    U  I924 :8;
    U  I925 :8;
    U  I926 :4;
    unsigned long long I927;
    unsigned long long I928;
    unsigned long long I929;
    unsigned long long I930;
    unsigned long long I931;
    U  I932;
    U  I933;
    U  I934;
    U  I935;
    HsimPeriodL  * I936;
    HsimPeriodL  * I937;
    U  I938;
} HsimSignalMonitor;
typedef struct {
    FlatNodeNum  I939;
    InstNum  I940;
    U  I880;
    scalar  I941;
    UB  I942;
    UB  I943;
    UB  I944;
    UB  I945;
    U  I946;
    U  I947;
    U  I948;
    U  I949;
    U  I950;
    U  I951;
    U  I952;
    U  I953;
    HsimSignalMonitor  * I954;
    RP  I955;
    RmaTimeStamp64  I956;
    U  I957;
    RmaTimeStamp64  I958;
    U  I959;
} HsimNodeRecord;
typedef struct {
    RP  I960;
    RP  I723;
} RmaIbfIp;
typedef struct {
    RP  I960;
    RP  pcode;
} RmaIbfPcode;
typedef struct {
    RmaEblk  I720;
} RmaEvTriggeredOrSyncLoadCg;
typedef struct {
    RO  I869;
    RP  pcode;
} SchedGateFanout;
typedef struct {
    RO  I869;
    RP  pcode;
    U   I899[4];
} SchedSelectGateFanout;
typedef struct {
    RP  pcode;
    RmaEblklq  I720;
} SchedGateEblk;
typedef struct {
    RP  pcode;
    RmaEblklq  I720;
    UB  * I961;
} SchedSelectGateEblk;
typedef struct {
    RmaEblk  I720;
    RP  I962;
} RmaAnySchedSampleSCg;
typedef struct {
    RmaEblk  I720;
    RP  I961;
    RP  I962;
    vec32  I963;
} RmaAnySchedVCg;
typedef struct {
    RmaEblk  I720;
    RP  I961;
    RP  I962;
    vec32   I769[1];
} RmaAnySchedWCg;
typedef struct {
    RmaEblk  I720;
    RP  I961;
    RP  I962;
    scalar   I964[1];
} RmaAnySchedECg;
typedef struct {
    U  I965;
    U  I708;
    U  I880;
    U  I966;
    RmaIbfIp  * I967;
    EBLK  I720;
    void * val;
} RmaThreadSchedCompiledLoads;
typedef struct {
    U  I708;
    U  I716;
    RmaThreadSchedCompiledLoads  * I968;
} RmaSchedCompileLoadsCg;
typedef struct {
    RP  I969;
} RmaRootCbkCg;
typedef struct {
    RP  I970;
} RmaRootVcdCg;
typedef struct {
    RP  I971;
} RmaRootForceCbkCg;
typedef struct {
    RmaEblk  I720;
    RP  I972;
} RmaForceCbkJmpCg;
typedef struct {
    U  I5;
    U  I716 :30;
    U  I973 :1;
    U  I974 :1;
    vec32  I801;
    U  I975;
    RP  I976;
    RP  I977;
} RmaForceSelectorV;
typedef struct {
    U  I5;
    RmaIbfPcode  I983;
} RmaNetTypeDriverGate;
typedef struct {
    U  I5;
    U  I652;
    RmaIbfPcode   I983[1];
} RmaNetTypeScatterGate;
typedef struct {
    U  I5;
    RmaIbfPcode  I983;
} RmaNetTypeGatherGate;
typedef struct {
    RmaIbfPcode  I984;
    U  I985 :3;
    U  I986 :1;
    U  I987 :1;
    U  I988 :16;
} RmaNbaGateOfn;
typedef struct {
    U  I5;
    NBS  I989;
    RmaIbfPcode  I984;
} RmaNbaGate1;
typedef struct {
    RP  ptable;
    RP  pfn;
    RP  pcode;
} Rma1InputGateFaninCgS;
typedef struct RmaSeqPrimOutputS_ RmaSeqPrimOutputOnClkS;
struct RmaSeqPrimOutputS_ {
    RP  pfn;
    RP  I992;
    U  state;
    U  I993;
    RP  I994;
    U  I690;
    scalar  val;
};
typedef struct {
    U  I5;
    U  iinput;
    RP  I996;
} RmaCondOptLoad;
typedef struct {
    U  I5;
    U  iinput;
    RP  I996;
} RmaMacroStateUpdate;
typedef struct {
    U  I5;
    U  state;
    U  I997;
    U  * I998;
} RmaMacroState;
typedef struct {
    U  iinput;
    RP  I999;
} RmaMultiInputLogicGateCg;
typedef struct {
    U  iinput;
    RP  ptable;
    RP  I999;
} RmaSeqPrimEdgeInputCg;
typedef struct {
    RmaEblk  I720;
    RP  pcode;
} RmaSched0GateCg;
typedef struct {
    RmaEblk  I720;
    RP  pcode;
    RP  pfn;
} RmaUdpDeltaGateCg;
typedef struct {
    RmaEblk  I720;
    RP  pcode;
    RP  pfn;
    scalar  I1000;
} RmaSchedDeltaGateCg;
typedef struct {
    UB  I1001;
    RP  I1002;
    RP  I1003;
} RmaPropNodeSeqLhsSCg;
typedef struct {
    RmaEblk  I720;
    RP  pcode;
    U  I880;
    U   I709[1];
} RmaBitEdgeEblk;
typedef struct {
    U  I5;
    RP  I800;
    RmaEblk  I720;
    RmaIbfPcode  I984;
} RmaGateDelay;
typedef struct {
    U  I5;
    RP  I800;
    RmaEblk  I720;
    RmaIbfPcode  I984;
} RmaGateBehavioralDelay;
typedef struct {
    U  I5;
    union {
        RP  I1207;
        RP  I1479;
        RP  I1492;
    } I774;
    RmaIbfPcode  I984;
} RmaMPDelay;
typedef struct {
    U  I5;
    RmaPulse  I1004;
    RmaIbfPcode  I984;
} RmaMPPulseHybridDelay;
typedef struct {
    U  I5;
    RmaIbfPcode  I984;
    RmaMps  I1005;
} RmaMPHybridDelay;
typedef struct {
    U  I5;
    U  I1006;
    RmaIbfPcode  I984;
    RmaEblk  I759;
} RmaMPHybridDelayPacked;
typedef struct {
    U  I5;
    RmaIbfPcode  I984;
    RmaMpspNewCsdf  I1007;
} RmaMPPulseDelay;
typedef struct {
    U  I5;
    RmaMpsp  I1007;
    RmaIbfPcode  I984;
} RmaMPPulseOptHybridDelay;
typedef struct _RmaBehavioralTransportDelay {
    U  I5;
    RP  I669;
    RmaTransEventHdr  I886;
    RP  I797;
    RmaIbfPcode  I984;
} RmaBehavioralTransportDelayS;
typedef struct {
    U  I5;
    U  I669;
    RmaTransEventHdr  I886;
    RP  I797;
    RmaIbfPcode  I984;
} RmaNtcTransDelay;
typedef struct {
    U  I5;
    U  I669;
    RmaEblk  I720;
    RmaIbfPcode  I984;
} RmaNtcTransMpwOptDelay;
typedef struct {
    U  I5;
    RmaEblk  I720;
    RmaIbfPcode  I984;
} RmaNtcTransZeroDelay;
typedef struct {
    U  I5;
    U  I1008;
    U  I1009;
    RmaTransEventHdr  I886;
    RP  I797;
    RmaIbfPcode  I984;
} RmaNtcTransDelayRF;
typedef struct {
    U  I5;
    U  I1008;
    U  I1009;
    RmaEblk  I720;
    RmaIbfPcode  I984;
} RmaNtcTransMpwOptDelayRF;
typedef struct {
    U  I5;
    RP  I1010;
    RmaTransEventHdr  I886;
    RP  I797;
    RmaIbfPcode  I984;
} RmaICTransDelay;
typedef struct {
    U  I5;
    RP  I1010;
    RmaEblk  I720;
    RmaIbfPcode  I984;
} RmaICTransMpwOptDelay;
typedef struct {
    U  I5;
    RmaEblk  I720;
    RmaIbfPcode  I984;
} RmaICTransZeroDelay;
typedef struct {
    U  I5;
    RP  I800;
    RmaEblk  I720;
    RmaIbfPcode  I984;
} RmaICSimpleDelay;
typedef struct {
    U  I5;
    union {
        RP  psimple;
        RP  I1479;
        RP  I1492;
    } I774;
    RmaIbfPcode  I984;
} RmaICDelay;
typedef struct {
    U  I5;
    RP  I800;
    RmaEblk  I720;
    RmaIbfPcode  I984;
} RmaPortDelay;
typedef struct {
    U  I5;
    RP   I1014[(4)];
} RmaRtlXEdgesHdr;
typedef struct {
    U  I5;
    US  I1015;
    US  I366;
    RP  I1016;
    RP  I1017;
    RP  I1018;
} RmaRtlEdgeBlockHdr;
typedef struct {
    RP  I1019;
    RP  I1020;
} RemoteDbsedLoad;
typedef struct {
    RmaEblk  I720;
    US  I1021;
    US  I366;
    U  I468;
    RP   I804[(4)];
    RP   I806[(4)];
    RemoteDbsedLoad   I1022[1];
} RmaRtlEdgeBlock;
typedef struct TableAssign_ {
    struct TableAssign_ * I872;
    struct TableAssign_ * I791;
    U  I5;
    U  I1024 :1;
    U  I1025 :1;
    U  I1026 :2;
    U  I1027 :1;
    U  I690 :8;
    U  I1028 :1;
    U  I1029 :1;
    U  I1030 :1;
    U  I366 :16;
    RP  ptable;
    RP  I999;
} TableAssign;
typedef struct TableAssignLayoutOnClk_ {
    struct TableAssignLayoutOnClk_ * I872;
    struct TableAssignLayoutOnClk_ * I791;
    U  I5;
    U  I1024 :1;
    U  I1025 :1;
    U  I1026 :2;
    U  I1027 :1;
    U  I690 :8;
    U  I1028 :1;
    U  I1029 :1;
    U  I1030 :1;
    U  I366 :16;
    RP  ptable;
    RmaSeqPrimOutputOnClkS  I1032;
    RmaEblk  I720;
} TableAssignLayoutOnClk;
typedef struct {
    U  I5;
    RP  I791;
    RP  I1033;
} RmaTableAssignList;
typedef struct {
    U  I5;
    RP  I791;
    RP  I1033;
    RP  I1034;
    RP  I994;
    US  I690;
    UB  I941;
    UB  I765;
    RP   I1035[0];
} RmaThreadTableAssignList;
typedef struct {
    RP  I1034;
    RP  I994;
    US  I690;
    UB  I941;
    UB  I1036;
    UB  I765;
} RmaThreadTableHeader;
typedef struct {
    RP  I1019;
} RmaWakeupListCg;
typedef struct {
    RP  I1019;
} RmaWakeupArrayCg;
typedef struct {
    U  I1037;
    U  I690;
    RmaTimeStamp   I1038[1];
} RmaTsArray;
typedef struct {
    U  iinput;
    RP  I1039;
} RmaConditionsMdb;
typedef struct {
    RP  I872;
    RP  I1040;
    RP  I715;
    U  I1041;
    scalar  I988;
    scalar  I1042;
    US  I1043 :1;
    US  I1044 :1;
    US  I1045 :1;
    US  I1046 :1;
    US  I1047 :1;
    US  I1048 :1;
    US  I1049 :5;
} RmaTcCoreSimple;
typedef struct {
    RP  I872;
    RP  I1040;
    RP  I715;
    U  I1041;
    scalar  I988;
    scalar  I1042;
    US  I1043 :1;
    US  I1044 :1;
    US  I1045 :1;
    US  I1046 :1;
    US  I1047 :1;
    US  I1048 :1;
    US  I1049 :5;
    RP  I1050;
} RmaTcCoreConditional;
typedef struct {
    RP  I872;
    RP  I1040;
    RP  I715;
    U  I1041;
    scalar  I988;
    scalar  I1042;
    US  I1043 :1;
    US  I1044 :1;
    US  I1045 :1;
    US  I1046 :1;
    US  I1047 :1;
    US  I1048 :1;
    US  I1049 :5;
    RP  I1050;
    RP  I1051;
} RmaTcCoreConditionalOpt;
typedef struct {
    RP  I872;
    RP  I1040;
    RP  I715;
    U  I1041;
    scalar  I988;
    scalar  I1042;
    US  I1043 :1;
    US  I1044 :1;
    US  I1045 :1;
    US  I1046 :1;
    US  I1047 :1;
    US  I1048 :1;
    US  I1049 :5;
    RP  I1051;
    RP  I1052;
    U  I1053;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtc;
typedef struct {
    RP  I1040;
    RP  I715;
    U  I1041;
    scalar  I988;
    scalar  I1042;
    US  I1043 :1;
    US  I1044 :1;
    US  I1045 :1;
    US  I1046 :1;
    US  I1047 :1;
    US  I1048 :1;
    US  I1049 :5;
} RmaTcCoreSimpleNoList;
typedef struct {
    RP  I1040;
    RP  I715;
    U  I1041;
    scalar  I988;
    scalar  I1042;
    US  I1043 :1;
    US  I1044 :1;
    US  I1045 :1;
    US  I1046 :1;
    US  I1047 :1;
    US  I1048 :1;
    US  I1049 :5;
    RP  I992;
} RmaTcCoreSimpleNoListMdb;
typedef struct {
    RP  I1040;
    RP  I715;
    U  I1041;
    scalar  I988;
    scalar  I1042;
    US  I1043 :1;
    US  I1044 :1;
    US  I1045 :1;
    US  I1046 :1;
    US  I1047 :1;
    US  I1048 :1;
    US  I1049 :5;
    RP  I1050;
} RmaTcCoreConditionalNoList;
typedef struct {
    RP  I1040;
    RP  I715;
    U  I1041;
    scalar  I988;
    scalar  I1042;
    US  I1043 :1;
    US  I1044 :1;
    US  I1045 :1;
    US  I1046 :1;
    US  I1047 :1;
    US  I1048 :1;
    US  I1049 :5;
    RP  I1050;
    RP  I1051;
} RmaTcCoreConditionalOptNoList;
typedef struct {
    RP  I1040;
    RP  I715;
    U  I1041;
    scalar  I988;
    scalar  I1042;
    US  I1043 :1;
    US  I1044 :1;
    US  I1045 :1;
    US  I1046 :1;
    US  I1047 :1;
    US  I1048 :1;
    US  I1049 :5;
    RP  I1051;
    RP  I1052;
    U  I1053;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtcNoList;
typedef struct {
    RP  I1040;
    RP  I715;
    U  I1041;
    scalar  I988;
    scalar  I1042;
    US  I1043 :1;
    US  I1044 :1;
    US  I1045 :1;
    US  I1046 :1;
    US  I1047 :1;
    US  I1048 :1;
    US  I1049 :5;
    RP  I1051;
    RP  I1052;
    RP  I992;
    U  I1053;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtcNoListMdb;
typedef struct {
    RP  I1040;
    RP  I715;
    U  I1041;
    scalar  I988;
    scalar  I1042;
    US  I1043 :1;
    US  I1044 :1;
    US  I1045 :1;
    US  I1046 :1;
    US  I1047 :1;
    US  I1048 :1;
    US  I1049 :5;
    RP  I1050;
    RP  I992;
} RmaTcCoreConditionalNoListMdb;
typedef struct {
    RP  I1040;
    RP  I715;
    U  I1041;
    scalar  I988;
    scalar  I1042;
    US  I1043 :1;
    US  I1044 :1;
    US  I1045 :1;
    US  I1046 :1;
    US  I1047 :1;
    US  I1048 :1;
    US  I1049 :5;
    U  I1055;
    RP  I1056;
    RP  I1057;
    RP  I1050;
    RP  I1058;
    RP  I1059;
    RmaTimeStamp  I1060;
} RmaTcCoreNochange;
typedef struct {
    RP  I1061;
    RP  I872;
} RmaTcCoreNochangeList;
typedef struct {
    RP  I1039;
    RmaTimeStamp  I1062;
    scalar  I1063;
} RmaConditionalTSLoadNoList;
typedef struct {
    RP  I872;
    RP  I1039;
    RmaTimeStamp  I1062;
    scalar  I1063;
} RmaConditionalTSLoad;
typedef struct {
    RmaTimeStamp  I1062;
    scalar  I1063;
    US  I988;
    RP  I1051;
} RmaConditionalTSLoadOptNoList;
typedef struct {
    RP  I872;
    RmaTimeStamp  I1062;
    scalar  I1063;
    US  I988;
    RP  I1051;
} RmaConditionalTSLoadOpt;
typedef struct {
    RP  I1051;
    RP  I1064;
    U  I1053;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtcNoList;
typedef struct {
    RP  I992;
    RP  I1051;
    RP  I1064;
    U  I1053;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtcNoListMdb;
typedef struct {
    RP  I872;
    RP  I1051;
    RP  I1064;
    U  I1053;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtc;
typedef struct {
    U  I1065;
    U  I1066;
    FlatNodeNum  I1067;
    U  I880;
    U  I1068;
    U  I1069;
    RmaIbfPcode  I984;
    union {
        scalar  I1070;
        vec32  I1071;
        scalar  * I1072;
        vec32  * I1073;
    } val;
} RmaScanSwitchData;
typedef struct {
    RP  I872;
    RP  I791;
    RP  I1074;
} RmaDoublyLinkedListElem;
typedef struct {
    RP  I1075;
    U  I1076 :1;
    U  I1077 :1;
    U  I1078 :1;
    U  I1079 :4;
    U  I366 :25;
    U  I1080;
} RmaSwitchGateInCbkListInfo;
typedef struct {
    union {
        RmaDoublyLinkedListElem  I1538;
        RmaSwitchGateInCbkListInfo  I2;
    } I683;
    RmaIbfPcode  I984;
} RmaSwitchGate;
typedef struct RmaNonEdgeLoadData1_ {
    US  I1081;
    scalar  val;
    scalar  I1082 :1;
    scalar  I1083 :1;
    scalar  I1084 :1;
    scalar  I1085 :1;
    scalar  I1086 :1;
    RP  I804;
    RP  I1087;
    RP  I1067;
    RP  I1088;
    RP  I1089;
} RmaNonEdgeLoadData1;
typedef struct RmaNonEdgeLoadHdr1_ {
    UB  I1082;
    UB  I1090;
    RmaNonEdgeLoadData1  * I1014;
    RmaNonEdgeLoadData1  * I791;
    void * I1091;
} RmaNonEdgeLoadHdr1;
typedef struct RmaChildClockProp_ {
    RP  I804;
    RP  I1092;
    RP  I1067;
    RP  pcode;
    scalar  val;
} RmaChildClockProp;
typedef struct RmaChildClockPropList1_ {
    RmaChildClockProp  * I1014;
    RmaChildClockProp  * I791;
} RmaChildClockPropList1;
typedef struct {
    U  I5;
    U  I1093;
} RmaHDLCosimDUTGate;
struct clock_load {
    U  I187 :5;
    U  I188 :12;
    U  I189 :1;
    U  I190 :2;
    U  I191 :1;
    U  I192 :1;
    U  I193 :1;
    U  I194 :9;
    U  I195;
    U  I196;
    void (* pfn)(void * I198, char val);
};
typedef struct clock_data {
    U  I203 :1;
    U  I204 :1;
    U  I205 :1;
    U  I206 :1;
    U  I187 :5;
    U  I188 :12;
    U  I207 :6;
    U  I208 :1;
    U  I190 :2;
    U  I191 :1;
    U  I194 :1;
    U  I209;
    U  I210;
    U  I211;
    U  I195;
    U  I212;
    U  I213;
    U  I214;
    U  I215;
    U  I216;
} HdbsClockData;
struct clock_hiconn {
    U  I220;
    U  I221;
    U  I195;
    U  I190;
};
typedef struct _RmaDaiCg {
    RP  I1094;
    RP  I1095;
    U  I1096;
} RmaDaiCg;
typedef union _RmaCbkMemOptUnion {
    RP  I1094;
    RP  I1097;
    RP  I1098;
} RmaCbkMemOptUnion;
typedef struct _RmaDaiOptCg {
    RmaCbkMemOptUnion  I1099;
} RmaDaiOptCg;
struct futq_slot2 {
    U  I751;
    U   I752[32];
};
struct futq_slot1 {
    U  I748;
    struct futq_slot2  I749[32];
};
struct futq_info {
    U  I744;
    U  I745;
    struct futq_slot1  I746[32];
};
struct futq {
    struct futq * I734;
    struct futq * I736;
    RmaEblk  * I737;
    RmaEblk  * I738;
    U  I725;
    U  I1;
};
struct sched_table {
    struct futq * I739;
    struct futq I740;
    struct hash_bucket * I741;
    struct hash_bucket * I743;
};
struct dummyq_struct {
    clock_struct  I1103;
    EBLK  * I1104;
    EBLK  * I1105;
    EBLK  * I1106;
    struct futq * I1107;
    struct futq * I1108;
    struct futq * I1109;
    struct sched_table * I1110;
    struct futq_info * I1112;
    U  I1114;
    U  I1115;
    U  I1116;
    struct millenium * I1117;
    EBLK  * I1119;
    EBLK  * I1120;
    EBLK  * I1121;
    EBLK  * I1122;
    EBLK  * I1123;
    EBLK  * I1124;
    EBLK  * I1125;
    EBLK  * I1126;
    EBLK  * I1127;
    EBLK  * I1128;
    EBLK  * I1129;
    EBLK  * I1130;
    EBLK  * I1131;
    EBLK  * I1132;
    EBLK  * I1133;
    EBLK  * I1134;
    EBLK  * I1135;
    EBLK  * I1136;
    MPS  * I1137;
    struct retain_t * I1138;
    EBLK  * I1139;
    EBLK  * I1140;
    EBLK  * I1141;
    EBLK  * I1142;
    EBLK  * I1143;
    EBLK  * I1144;
    EBLK  * I1145;
    EBLK  * I1146;
    EBLK  * I1147;
    EBLK  * I1148;
    EBLK  * I1149;
    EBLK  * I1150;
    EBLK  * I1151;
    EBLK  * I1152;
    EBLK  * I1153;
    EBLK  * I1154;
    EBLK  * I1155;
    EBLK  * I1156;
    EBLK  * I1157;
    EBLK  * I1158;
    EBLK  * I1159;
    EBLK  * I1160;
    EBLK  * I1161;
    EBLK  * I1162;
    EBLK  * I1163;
    EBLK  I1164;
    EBLK  * I1165;
    EBLK  * I1166;
    EBLK  * I1167;
    EBLK  * I1168;
    int I1169;
    int I1170;
    struct vcs_globals_t * I1171;
    clock_struct  I1172;
    unsigned long long I1173;
    EBLK  * I1174;
    EBLK  * I1175;
    void * I1176;
};
typedef void (* FP)(void *  , scalar   );
typedef void (* FP1)(void *  );
typedef void (* FPRAP)(void *  , vec32  *  , U   );
typedef U  (* FPU1)(void *  );
typedef void (* FPV)(void *  , UB  *  );
typedef void (* FPVU)(void *  , UB  *  , U   );
typedef void (* FPLSEL)(void *  , scalar   , U   );
typedef void (* FPLSELV)(void *  , vec32  *  , U   , U   );
typedef void (* FPFPV)(UB  *  , UB  *  , U   , U   , U   , U   , U   , UB  *  , U   );
typedef void (* FPFA)(UB  *  , UB  *  , U   , U   , U   , U   , U   , U   , UB  *  , U   );
typedef void (* FPRPV)(UB  *  , U   , U   , U   );
typedef void (* FPEVCDLSEL)(void *  , scalar   , U   , UB  *  );
typedef void (* FPEVCDLSELV)(void *  , vec32  *  , U   , U   , UB  *  );
typedef void (* FPNTYPE_L)(void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_H)(void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_LPAP)(void *  , void *  , void *  , U   , U   , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_HPAP)(void *  , void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef struct _lqueue {
    EBLK  * I721;
    EBLK  * I1177;
    int I1178;
    struct _lqueue * I762;
} Queue;
typedef struct {
    void * I1180;
    void * I1181;
    void * I1182;
    void * I1183;
    void * I1184;
} ClkLevel;
typedef struct {
    unsigned long long I1185;
    EBLK  I1186;
    U  I1187;
    U  I1188;
    union {
        void * pHeap;
        Queue  * pList;
    } I683;
    unsigned long long I1189;
    ClkLevel  I1190;
    Queue   I1191[1];
} Qhdr;
extern UB   Xvalchg[];
extern UB   X4val[];
extern UB   X3val[];
extern UB   X2val[];
extern UB   XcvtstrTR[];
extern UB   Xcvtstr[];
extern UB   Xbuf[];
extern UB   Xbitnot[];
extern UB   Xwor[];
extern UB   Xwand[];
extern U   Xbitnot4val[];
extern UB   globalTable1Input[];
extern __thread unsigned long long vcs_clocks;
extern UB   Xunion[];
extern U  fRTFrcRelCbk;
extern FP  txpFnPtr;
extern FP   rmaFunctionArray[];
extern UP   rmaFunctionRtlArray[];
extern FP   rmaFunctionLRArray[];
extern U  rmaFunctionCount;
extern U  rmaFunctionLRCount;
extern U  rmaFunctionLRDummyCount;
extern UP  rmaFunctionDummyEndPtr;
extern __thread UB  dummyScalar;
extern __thread UB  fScalarIsForced;
extern __thread UB  fScalarIsReleased;
extern U  fNotimingchecks;
extern RP  * iparr;
extern FP1  * rmaPostAnySchedFnPtr;
extern FP1  * rmaPostAnySchedFnSamplePtr;
extern FP1  * rmaPostAnySchedVFnPtr;
extern FP1  * rmaPostAnySchedWFnPtr;
extern FP1  * rmaPostAnySchedEFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusNonCongruentFnPtr;
extern FP1  * rmaPostSchedUpdateEvTrigFnPtr;
extern FP1  * rmaSched0UpdateEvTrigFnPtr;
extern FP1  * rmaPostSchedRecoveryResetDbsFnPtr;
extern U  fGblDataOrTime0Prop;
extern UB   rmaEdgeStatusValArr[];
extern FP1  * propForceCbkSPostSchedCgFnPtr;
extern FP1  * propForceCbkMemoptSPostSchedCgFnPtr;
extern UB  * ptableGbl;
extern UB  * expandedClkValues;
extern __thread Qhdr  * lvlQueue;
extern __thread unsigned threadIndex;
extern int cPeblkThreads;
extern US   xedges[];
extern U  mhdl_delta_count;
extern U  ignoreSchedForScanOpt;
extern U  fignoreSchedForDeadComboCloud;
extern int fZeroUser;
extern U  fEveBusPullVal;
extern U  fEveBusPullFlag;
extern U  fFutEventPRL;
extern U  fBufferingEvent;
extern __thread UB  fNettypeIsForced;
extern __thread UB  fNettypeIsReleased;
extern EBLK  * peblkFutQ1Head;
extern EBLK  * peblkFutQ1Tail;
extern US  * edgeActionT;
extern unsigned long long * derivedClk;
extern U  fHashTableSize;
extern U  fSkipStrChangeOnDelay;
extern scalar   edgeChangeLookUp[4][4];
extern U  fDoingTime0Prop;
extern U  fLoopDetectMode;
extern int gFLoopDectCodeEna;
extern U  fLoopReportRT;


extern void *mempcpy(void* s1, void* s2, unsigned n);
extern UB* rmaEvalDelays(UB* pcode, scalar val);
extern UB* rmaEvalDelaysV(UB* pcode, vec32* pval);
extern void rmaPopTransEvent(UB* pcode);
extern void rmaSetupFuncArray(UP* ra, U c, U w);
extern void rmaSetupRTLoopReportPtrs(UP* funcs, UP* rtlFuncs, U cnt, U cntDummy, UP end);
extern void SinitHsimPats(void);
extern void VVrpDaicb(void* ip, U nIndex);
extern int SDaicb(void *ip, U nIndex);
extern void SDaicbForHsimNoFlagScalar(void* pDaiCb, unsigned char value);
extern void SDaicbForHsimNoFlagStrengthScalar(void* pDaiCb, unsigned char value);
extern void SDaicbForHsimNoFlag(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimNoFlag2(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimWithFlag(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimNoFlagFrcRel(void* pRmaDaiCg, unsigned char reason, int msb, int lsb, int ndx);
extern void SDaicbForHsimNoFlagFrcRel2(void* pRmaDaiCg, unsigned char reason, int msb, int lsb, int ndx);
extern void VcsHsimValueChangeCB(void* pRmaDaiCg, void* pValue, unsigned int valueFormat);
extern U isNonDesignNodeCallbackList(void* pRmaDaiCg);
extern void SDaicbForHsimCbkMemOptNoFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptNoFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void VVrpNonEventNonRegdScalarForHsimOptCbkMemopt(void* ip, U nIndex);
extern void SDaicbForHsimCbkMemOptNoFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptNoFlagDynElabFrcRel(U* mem, unsigned char reason, int msb, int lsb, int ndx);
extern void SDaicbForHsimCbkMemOptNoFlagFrcRel(void* pDaiCb, unsigned char reason, int msb, int lsb, int ndx);
extern void hsimDispatchCbkMemOptForVcd(RP p, U val);
extern void* hsimGetCbkMemOptCallback(RP p);
extern void hsimDispatchCbkMemOptNoDynElabS(RP* p, U val, U isStrength);
extern void* hsimGetCbkPtrNoDynElab(RP p);
extern void hsimDispatchCbkMemOptDynElabS(U** pvcdarr, U** pcbkarr, U val, U isScalForced, U isScalReleased, U isStrength);
extern void hsimDispatchCbkMemOptNoDynElabVector(RP* /*RmaDaiOptCg* */p, void* pval, U /*RmaValueType*/ vt, U cbits);
extern void copyAndPropRootCbkCgS(RmaRootCbkCg* pRootCbk, scalar val);
extern void copyAndPropRootCbkCgV(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgW(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgE(RmaRootCbkCg* rootCbk, scalar* pval);
extern void dumpRootVcdCg(RmaRootVcdCg* pRootVcd, scalar val);
extern void Wsvvar_callback_non_dynamic1(RP* ptr, int);
extern void rmaExecEvSyncList(RP plist);
extern void Wsvvar_callback_virt_intf(RP* ptr);
extern void Wsvvar_callback_hsim_var(RP* ptr);
extern void checkAndConvertVec32To2State(vec32* value, vec32* svalue, U cbits, U* pforcedBits);
extern unsigned int fGblDataOrTime0Prop;
extern void SchedSemiLerMP1(UB* pmps, U partId);
extern void SchedSemiLerMPO(UB* pmpso, U partId);
extern void rmaDummyPropagate(void);
extern RP rmaTestCg(RP pcode, U vt, UB* value);
extern void hsUpdateModpathTimeStamp(UB* pmps);
extern void doMpd32One(UB* pmps);
extern void doMpdCommon(MPS* pmps);
extern TimeStamp GET_DIFF_DELAY_FUNC(TimeStamp ts);
extern void SchedSemiLerMP(UB* ppulse, U partId);
extern EBLK *peblkFutQ1Head;
extern EBLK *peblkFutQ1Tail;
extern void scheduleuna(UB *e, U t);
extern void scheduleuna_mp(EBLK *e, unsigned t);
extern void schedule(UB *e, U t);
extern void sched_hsopt(struct dummyq_struct * pQ, EBLK *e, U t);
extern void sched_millenium(struct dummyq_struct * pQ, void *e, U thigh, U t);
extern void schedule_1(EBLK *e);
extern void sched0(UB *e);
extern void sched0Raptor(UB *e);
extern void sched0lq(EBLK *e);
extern void sched0lqnc(EBLK *e);
extern void sched0una(UB *e);
extern void sched0una_th(struct dummyq_struct *pq, UB *e);
extern void hsopt_sched0u_th(struct dummyq_struct *pq, UB *e);
extern void scheduleuna_mp_th(struct dummyq_struct *pq, EBLK *e, unsigned t);
extern void schedal(UB *e);
extern void sched0_th(struct dummyq_struct * pQ, EBLK *e);
extern void sched0u(UB *e);
extern void sched0u_th(struct dummyq_struct *pq, UB *e);
extern void sched0_hsim_front_th(struct dummyq_struct * pQ, UB *e);
extern void sched0_hsim_frontlq_th(struct dummyq_struct * pQ, UB *e);
extern void sched0lq_th(struct dummyq_struct * pQ, UB *e);
extern void schedal_th(struct dummyq_struct * pQ, UB *e);
extern void scheduleuna_th(struct dummyq_struct * pQ, void *e, U t);
extern void schedule_th(struct dummyq_struct * pQ, UB *e, U t);
extern void schedule_1_th(struct dummyq_struct * pQ, EBLK *peblk);
extern void SetupLER_th(struct dummyq_struct * pQ, EBLK *e);
extern void FsdbReportClkGlitch(UB*,U);
extern void SchedSemiLer_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXP_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXPFreeVar_th(struct dummyq_struct * pQ, EBLK *e);
extern U getVcdFlags(UB *ip);
extern void VVrpNonEventNonRegdScalarForHsimOpt(void* ip, U nIndex);
extern void VVrpNonEventNonRegdScalarForHsimOpt2(void* ip, U nIndex);
extern void SchedSemiLerTBReactiveRegion(struct eblk* peblk);
extern void SchedSemiLerTBReactiveRegion_th(struct eblk* peblk, U partId);
extern void SchedSemiLerTr(UB* peblk, U partId);
extern void SchedSemiLerNBA(UB* peblk, U partId);
extern void NBA_Semiler(void *ip, void *pNBS);
extern void sched0sd_hsim(UB* peblk);
extern void sched0sd_hsim_PRL(UB* peblk);
extern void sched0lq_parallel_clk(EBLK* peblk);
extern void doFgpRaceCheck(UB* pcode, UB* p, U flag);
extern void doSanityLvlCheck();
extern void sched0lq_parallel_ova(EBLK* peblk);
extern void sched0lq_parallel_ova_precheck(EBLK* peblk);
extern void rmaDlpEvalSeqPrim(UB* peblk, UB val, UB preval);
extern void appendNtcEvent(UB* phdr, scalar s, U schedDelta);
extern void appendTransEventS(RmaTransEventHdr* phdr, scalar s, U schedDelta);
extern void schedRetainHsim(MPS* pMPS, scalar sv, scalar pv);
extern void updateRetainHsim(MPS* pMPS,scalar sv, scalar pv);
extern void hsimRegisterEdge(void* sm,  scalar s);
extern U pvcsGetPartId();
extern void HsimPVCSPartIdCheck(U instNo);
extern void debug_func(U partId, struct dummyq_struct* pQ, EBLK* EblkLastEventx); 
extern struct dummyq_struct* pvcsGetQ(U thid);
extern EBLK* pvcsGetLastEventEblk(U thid);
extern void insertTransEvent(RmaTransEventHdr* phdr, scalar s, scalar pv, scalar resval, U schedDelta, int re, UB* predd, U fpdd);
extern void insertNtcEventRF(RmaTransEventHdr* phdr, scalar s, scalar pv, scalar resval, U schedDelta, U* delays);
extern U doTimingViolation(RmaTimeStamp ts,RP* pdata, U fskew, U limit, U floaded, U fcondopt, RmaTimeStamp tsNochange);
extern void sched_gate_hsim(EBLK* peblk, unsigned t, RP* offset, U gd_info, U encodeInPcode, void* propValue);
extern int getCurSchedRegion();
extern FP getRoutPtr(RP, U);
extern U rmaChangeCheckAndUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern void rmaUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaChangeCheckAndUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaLhsPartSelUpdateE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaUpdateWithForceSelectorE(scalar* pvalDst, scalar* pvalSrc, U cbits, U* pforceSelector);
extern void rmaUpdateWFromE(vec32* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaLhsPartSelWithChangeCheckE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaLhsPartSelWFromE(vec32* pvalDst, scalar* pvalSrc, U index,U width);
extern U rmaChangeCheckAndUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern U rmaLhsPartSelWithChangeCheckW(vec32* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern U rmaLhsPartSelWithChangeCheckEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelUpdateW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void rmaEvalWunionW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWorW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWandW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalUnionE(scalar* dst, scalar* src, U cbits, U count, RP ptable);
typedef U RmaCgFunctionType;
extern RmaIbfPcode* rmaEvalPartSelectsW(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsWLe32(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsWToE(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsEToE(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce, UB* pevcdStatus);
extern RmaIbfPcode* rmaEvalPartSelectsEToW(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern U rmaEvalBitPosEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U VcsForceVecVCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U/*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecVCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecWCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecWCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecECg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U /*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType,UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecACg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U /*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType,UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecCg(UB* pcode, UB* pvDst, U ibeginDst, U width, U /*RmaValueType*/ type,U fisRoot, UB* prhsDst, U frhs, U* pforcedbits);
extern U VcsDriveBitsAndDoChangeCheckV(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckW(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckE(scalar* pvSel, scalar* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern void cgvecDebug_Eblk(UB* pcode);
extern U rmaCmpW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void copyVec32ArrMask(vec32* pv1, vec32* pv2, U len, U* mask);
extern void* memcpy(void*, const void*, size_t);
extern int memcmp(const void*, const void*, size_t);
extern void propagateScanOptPathVal(EBLK *peblk);
extern UB* rmaProcessScanSwitches(UB* pcode, scalar val);
extern UB* rmaProcessScanSwitchesV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanoptDump(UB* pcode, scalar val);
extern UB* rmaProcessScanoptDumpV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanChainOptSeqPrims(UB* pcode, scalar val);
extern void rmaProcessPvcsCcn(UB* pcode, scalar val);
extern void rmaProcessPvcsCcnE(UB* pcode, scalar* val);
extern void rmaProcessPvcsCcnW(UB* pcode, vec32* val);
extern void rmaProcessPvcsCcnV(UB* pcode, vec32* val);
extern void rmaProcessPvcsCcnCompiledS(UB* pcode, U offset, scalar ibnval);
extern void rmaProcessPvcsCcnCompiledV(UB* pcode, U offset, vec32* pval);
extern void schedResetRecoveryDbs(U cedges, EBLK* peblkFirst);
extern UB* rmaEvalUnaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVOneFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVLargeFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalAndOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpV(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpV(UB* pcode, vec32* value);
extern UB* rmaEvalTernaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalTernaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalBinaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpS(UB* pcode, scalar val);
extern scalar rmaGetScalarFromWCg(vec32* pval, U index);
extern void rmaSetScalarInWCg(vec32* pval, U index, scalar s);
extern void rmaCountRaptorBits(void* pval, void* pvalPrev, U cbits, U vt);
extern void setHsimFunc(void* ip);
extern void unsetHsimFunc(void* ip);
extern UB* getEvcdStatusByFlagsE(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsV(vec32* pvec32, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsS(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table);
extern UB* getSingleDrvEvcdStatusS(UB value, U fTBDriver);
extern UB* getSingleDrvEvcdStatusE(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getSingleDrvEvcdStatusV(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getEvcdStatusByDrvEvcdStatus(UB* pdrvevcdStatus, U cdrivers, UB* table, U cbits);
extern void evcdCallback(UP pcode, U cbits);
extern UB* getSavedEvcdStatus(void);
extern void saveEvcdStatus(UB*);
extern void mhdlMarkExport(void*, U);
extern void levelInsertQueue(int);
extern void VcsRciRtl(RP pcode);
extern U fLoopDetectMode;
extern int gFLoopDectCodeEna;
extern U fLoopReportRT;
extern void rtSched0LoopDectDumpProcess(void* e, void* rtn, void* PQ);
extern void pushHsimRtnCtxt(void* pcode);
extern void popHsimRtnCtxt();
extern EBLK* loopReportInlinedSched0Wrapper(EBLK *peblk);
extern void loopReportSched0Wrapper(EBLK *peblk, unsigned int sfType, unsigned int fTH, struct dummyq_struct* pq);
extern void loopReportSchedSemiLerWrapper(EBLK *peblk, int sfType);
extern void CallGraphPushNodeAndAddToGraph(UP flatNode, UP instNum, U dummy);
extern void CallGraphPopNode(void);
extern RP elabGetIpTpl(U in);
extern U rmaEvalBitBothEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQXW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval01EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval0XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval10EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval1XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX1EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX0EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitPosEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitBothEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern void rmaScheduleNbaGate(RP pcode, scalar val);
extern void rmaEvalRtlEdgeLoads(RmaRtlEdgeBlockHdr *phdr, US clkEdge, scalar clkVal, scalar prevClkVal, scalar val4,   scalar prevval4);
extern void rmaEvaluateDynamicGateLoadsCg(RP p, scalar s);
extern void rmaEvaluateFusedWithDynamicGateLoadsCg(RP p, scalar s);
extern void rmaScheduleGatedClockEdgeLoad(UB* p, US* ea, U fNonEdgeLoad, UB* plist, UB* pprevlist, scalar v);
extern void rmaRemoveNonEdgeLoads(UB* pcode);
extern void rmaRecordEvents(HsimNodeRecord *pnr);
extern void handlePCBs(UB* p, U i);
extern void markMasterClkOvaLists(U fdbs, RP p);
extern void rmaChildClockPropAfterWrite(UB* p);
extern void rmaSchedChildClockPropAfterWrite(UB* p, UB* pmasterList, UB val);
extern void HDLCosimProcessDUTInputChange(U inputId, void* val);
extern void rmaChangeListForMovedGates(UB clkVal, UB f10Edge, UB* subMasterVal, UB* plist, RP* p, U count);
extern void rmaEvalSeqPrimLoadsByteArray(UB* pcode, UB val, UB prevval4);
extern void rmaEvalSeqPrimLoadsByteArrayX(UB* pcode, UB val, UB prevval4);
extern void vcsAbortForBadEBlk(void);
extern scalar edgeChangeLookUp[4][4];
extern void Wsvvar_sched_virt_intf_eval(RP* ptr);
extern U rmaIsS2State(scalar s);
extern U rmaIsV2State(vec32* pval, U cbits);
extern U rmaIsW2State(vec32* pval, U cbits);
extern U rmaIsE2State(scalar* pval, U cbits);
extern void rmaUpdateRecordFor2State(HsimNodeRecord* record, U f2state);
typedef void (*FuncPtr)();
static inline U asm_bsf (U in)
{
#if defined(linux)
    U out;
    asm ("movl %1, %%eax; bsf %%eax, %%eax; movl %%eax, %0;"
        :"=r"(out)
        :"r"(in)
        :"%eax"
        );
    return out;
#else
    return 0;
#endif
}


#ifdef __cplusplus
extern "C" {
#endif
void  hs_0_M_0_0__simv_daidir (UB  * pcode, vec32  * I961, U  I880);
void  hs_0_M_0_5__simv_daidir (UB  * pcode, U  I880);
void  hs_0_M_1_0__simv_daidir (UB  * pcode, vec32  * I961, U  I880);
void  hs_0_M_2_0__simv_daidir (UB  * pcode, vec32  * I961, U  I880);
void  hs_0_M_2_6__simv_daidir (UB  * pcode, scalar  val, U  I988);
void  hs_0_M_2_7__simv_daidir (UB  * pcode, vec32  * I1279, U  I988, U  I1288);
void  hs_0_M_2_10__simv_daidir (UB  * pcode, vec32  * I961);
void  hs_0_M_3_0__simv_daidir (UB  * pcode, vec32  * I961, U  I880);
void  hs_0_M_3_9__simv_daidir (UB  * pcode, vec32  * I961);
void  hs_0_M_4_0__simv_daidir (UB  * pcode, vec32  * I961, U  I880);
void  hs_0_M_5_0__simv_daidir (UB  * pcode, vec32  * I961, U  I880);
void  hs_0_M_5_9__simv_daidir (UB  * pcode, vec32  * I961);
void  hs_0_M_6_0__simv_daidir (UB  * pcode, vec32  * I961, U  I880);
void  hs_0_M_6_5__simv_daidir (UB  * pcode, U  I880);
void  hs_0_M_7_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_7_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_8_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_8_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_9_0__simv_daidir (UB  * pcode, vec32  * I961, U  I880);
void  hs_0_M_9_5__simv_daidir (UB  * pcode, U  I880);
void  hs_0_M_10_0__simv_daidir (UB  * pcode, vec32  * I961, U  I880);
void  hs_0_M_11_0__simv_daidir (UB  * pcode, vec32  * I961, U  I880);
void  hs_0_M_12_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_12_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_13_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_14_0__simv_daidir (UB  * pcode, vec32  * I961, U  I880);
void  hs_0_M_15_0__simv_daidir (UB  * pcode, vec32  * I961, U  I880);
void  hs_0_M_15_5__simv_daidir (UB  * pcode, U  I880);
void  hs_0_M_16_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_16_5__simv_daidir (UB  * pcode, UB  val);
void  hs_0_M_17_0__simv_daidir (UB  * pcode, vec32  * I961, U  I880);
void  hs_0_M_17_5__simv_daidir (UB  * pcode, U  I880);
void  hsG_0__0 (struct dummyq_struct * I1199, EBLK  * I1200, U  I669);
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
  }
#endif
#endif /*__DO_RMAHDR_*/

